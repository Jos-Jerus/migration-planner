// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
