// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
