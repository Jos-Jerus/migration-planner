// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
