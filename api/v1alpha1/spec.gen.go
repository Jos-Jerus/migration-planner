// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UIjhQAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
